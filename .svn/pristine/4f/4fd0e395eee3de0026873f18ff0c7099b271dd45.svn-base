<template>
  <div>
    <div class="content"  v-loading="loading">
      <div class="titleText">
        <el-row :gutter="20">
          <!--<el-col :span="4">-->
            <!--<div class="block" v-if="typeName">-->
              <!--<span class="demonstration"></span>-->
              <!--<el-date-picker-->
                <!--v-model="value2"-->
                <!--type="month"-->
                <!--placeholder="选择立账日期">-->
              <!--</el-date-picker>-->
            <!--</div>-->
          <!--</el-col>-->
          <el-col :span="24">
            <div class="viewHeader">
              <span @click="toVoid" v-if="typeName">作废</span>
              <span @click="submission" v-if="typeName">提交审核</span>
              <span @click="balance" v-if="typeName">一键平衡</span>
              <span @click="first">首个</span>
              <span @click="prev">上一个</span>
              <span @click="next">下一个</span>
              <span @click="last">末尾</span>
              <span>{{ generateXh+'/'+generateTotle }}</span>
              <span @click="preservation" v-if="typeName">保存</span>
            </div>
          </el-col>
        </el-row>
      </div>
      <el-form ref="form" :model="costView" label-width="90px" class="search">
        <el-row>
          <el-col :span="6">
            <el-form-item label="门店名称">
              <el-input v-model="costView.mall_name" readonly></el-input>
            </el-form-item>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="商户编码">
              <el-input v-model="costView.customer_code" readonly></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="商户名称">
              <el-input v-model="costView.customer_name" readonly></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="6" v-if="typeName">
            <el-form-item label="剩余抵扣金额" class="width_110">
              <el-input v-model="surplus" readonly></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="6">
            <el-form-item label="账单会计期">
              <el-input v-model="costView.month_name" readonly></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="代收金额">
              <el-input v-model="costView.in_amt" readonly></el-input>

              <!--<el-select v-model="costView.in_amt" readonly>-->
                <!--<el-option :value='1' label="找零"></el-option>-->
                <!--<el-option :value='2' label="转存余款账户"></el-option>-->
              <!--</el-select>-->
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="商户余额">
              <el-input v-model="costView.qk_amt" readonly></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="应收金额">
              <el-input v-model="costView.out_amt" readonly></el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="6">
            <el-form-item label="往期欠款">
              <el-input v-model="costView.custamt" readonly></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="返款金额">
              <el-input v-model="costView.re_fund" readonly></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="审批状态">
              <el-select v-model="costView.status" disabled >
                <el-option value='0' label="作废"></el-option>
                <el-option value='1' label="草稿"></el-option>
                <el-option value='2' label="审批中"></el-option>
                <el-option value='3' label="生效"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="6">
            <el-form-item label="执行状态">
              <el-select v-model="costView.exec_flag" disabled >
                <el-option value='0' label="未执行"></el-option>
                <el-option value='1' label="已执行"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <div class="contract_table">
        <el-row>
          <el-col :span="12">
            <div class="titleText">抵扣费用明细</div>
            <el-table
              :data="payDetailList"
              style="width: 100%;"
              height="245px"
              show-summary
              ref="payDetailTable"
              @selection-change="payDetailchangFun"
              :summary-method="getSummaries"
              border>
              <el-table-column
                prop="contract_main_id"
                fixed
                type="selection"
                width="55"/>
              <el-table-column
                prop="store_name"
                :show-overflow-tooltip="true"
                min-width="100px"
                label="店铺名称">
              </el-table-column>
              <el-table-column
                prop="invoice_code"
                :show-overflow-tooltip="true"
                min-width="100px"
                label="账单编号">
              </el-table-column>
              <el-table-column
                prop="charge_description"
                :show-overflow-tooltip="true"
                min-width="100px"
                label="费用类型">
                <template slot-scope="scope">
                    <span v-for="(item, index) in getTypeList">
                     {{parseInt(scope.row.charge_description) == parseInt(item.charge_type_id) ? item.type_name : ''}}
                    </span>
                </template>
              </el-table-column>
              <el-table-column
                prop="charge_from"
                :show-overflow-tooltip="true"
                min-width="110px"
                label="费用开始日期">
              </el-table-column>
              <el-table-column
                prop="charge_to"
                :show-overflow-tooltip="true"
                min-width="110px"
                label="费用结束日期">
              </el-table-column>
              <el-table-column
                prop="net_charge_amount"
                :show-overflow-tooltip="true"
                min-width="100px"
                label="应收金额">
              </el-table-column>

              <el-table-column
                prop="charge_amount"
                :show-overflow-tooltip="true"
                min-width="100px"
                label="已收金额">
              </el-table-column>
              <el-table-column
                fixed="right"
                prop="topay_amount"
                min-width="120"
                v-if="typeName"
                label="本次抵扣金额">
                <template slot-scope="scope">
                  <el-input size="small" type="number" v-model="scope.row.topay_amount" placeholder="请输入内容"
                            @change="editFcous(scope.$index, scope.row)"></el-input>
                </template>
              </el-table-column>
            </el-table>
            <el-pagination
              :page-sizes="[10, 20, 30, 40, 50]"
              :page-size="pageSize"
              :current-page.sync="currentPage"
              :total="total"
              background
              layout="prev, pager, next, total, sizes"
              @current-change="pagination"
              @size-change="handleSizeChange"/>
            </el-pagination>
          </el-col>
          <el-col :span="12">
            <div class="titleText">代收款列表</div>
            <el-table
              :data="payTypeList"
              style="width: 100%;"
              ref="multipleTable"
              show-summary
              height="245px"
              @row-click="clickRow"
              @selection-change="changFun"
              :summary-method="payDetailgetSummaries"
              border>
              <el-table-column
                prop="contract_main_id"
                fixed
                type="selection"
                width="55"/>
              <el-table-column
                prop="pay_code"
                :show-overflow-tooltip="true"
                min-width="100px"
                label="单据号">
              </el-table-column>
              <el-table-column
                prop="trans_date"
                :show-overflow-tooltip="true"
                min-width="100"
                label="收款日期">
              </el-table-column>
              <el-table-column
                prop="store_name"
                :show-overflow-tooltip="true"
                min-width="100"
                label="店铺名称">
              </el-table-column>
              <el-table-column
                prop="pay_name"
                :show-overflow-tooltip="true"
                min-width="100"
                label="代收类型">
              </el-table-column>
              <el-table-column
                prop="rate"
                :show-overflow-tooltip="true"
                min-width="100"
                label="手续费率">
              </el-table-column>
              <el-table-column
                prop="pay_amt"
                :show-overflow-tooltip="true"
                min-width="100"
                label="交易金额">
              </el-table-column>
              <el-table-column
                prop="pay_amount"
                :show-overflow-tooltip="true"
                min-width="100"
                label="手续费">
              </el-table-column>
              <el-table-column
                prop="net_amt"
                :show-overflow-tooltip="true"
                min-width="100"
                fixed="right"
                label="代收金额">
              </el-table-column>
            </el-table>
          </el-col>
        </el-row>
      </div>
    </div>
  </div>
</template>

<script>
  import { common } from '@/common/common'

  export default {
    name: 'costViewList',
    data() {
      return {
        formInline:{},
        costView: {
        },// 账单查看
        preData: {},
        payTypeList: [],
        payDetailList: [],
        payDetailListjs: [], //一键平衡
        payDetailchangFunTable: [], //一键平衡
        total: 0,//分页总数据
        currentPage: 1,//当前页码
        pageSize: 10,//当前页码
        typeName: false,
        getTypeList: [],
        surplus: 0, // 剩余抵扣金额
        generateXh:'',
        generateTotle:'',
        height: {
          height: window.innerHeight * 0.7 + 'px'
        },
        invoice_code: '',
        value2:'',
        loading: false,
        num:0,
        changFunTable:[],
      }
    },
    props: ['generateRefundId', 'type', 'mallId','generateIndex','generateCount','generateFormInline'],
    created() {

      this.formInline = this.generateFormInline;
      let data = {}
      this.getData()
      data.id = this.generateRefundId;
      data.mall_id = this.mallId;
      data.seltype = this.type == '查看' ? 2 : 1;
      this.generateXh = this.generateIndex;
      this.generateTotle = this.generateCount;
      data.xh = this.generateIndex;
      data.count = this.generateCount;
      this.costViews(data);
      if (this.type == '查看') {
        this.typeName = false;
      } else {
        this.typeName = true;
      }
    },
    methods: {
      getData() {//预渲染参数
        let that = this
        this.http.post('table_util/getPreData', { act: 'contract' }).then(res => {
          this.preData = res.data.data
        }).catch((err) => {
          this.$message.error(err.response.data.msg);
        });
        that.http.post('charge_type/getTypeList',{ module: 'all' }).then(res => {
          that.getTypeList = res.data.data;
        }).catch((err) => {
          that.$message.error(err.response.data.msg);
        });

      },
      getSummaries(param){// 合计
        const { columns, data } = param;
        const sums = [];
        columns.forEach((column, index) => {
          const values = data.map(item => Number(item[column.property]));
          if (!values.every(value => isNaN(value))) {
            if(index != 2) {
              sums[index] = values.reduce((prev, curr) => {
                const value = Number(curr);
                if (!isNaN(value)) {
                  return prev + curr;
                } else {
                  return prev;
                }
              }, 0);
            }

          }
        });
        return sums;
      },
      clickRow(row) {//选择当前行
        this.$refs.multipleTable.toggleRowSelection(row);
      },
      changFun(row) {//获取当前行数据
        this.num = 0;
        this.changFunTable = row;
        let netAmt=0;
        let topayAmount = 0;
        if(row.length != 0) { //代收款列表选中
          if(this.payDetailchangFunTable.length != 0) {//判断抵扣费用是否有选中值 有
            this.payDetailchangFunTable.forEach(payItem => {//循环抵扣费用
              if(payItem.topay_amount < 0) {
                topayAmount += parseFloat(Math.abs(payItem.topay_amount));//抵扣金额相加
              }else {
                topayAmount -= parseFloat(payItem.topay_amount);//抵扣金额相加
              }
            })
          }
          row.forEach(item => {//代收款金额相加
            if(item.net_amt < 0) {
              netAmt -= parseFloat(Math.abs(item.net_amt));
            }else {
              netAmt += parseFloat(item.net_amt);
            }
          })
          this.surplus = topayAmount + netAmt;
        }else {//代收款列表没有选中
          this.payDetailchangFunTable.forEach(payItem => {//循环抵扣费用
            if(payItem.topay_amount < 0) {
              topayAmount += parseFloat(Math.abs(payItem.topay_amount));//抵扣金额相加
            }else {
              topayAmount -= parseFloat(payItem.topay_amount);//抵扣金额相加
            }
          })
          this.surplus = topayAmount + netAmt;
        }
      },
      payDetailgetSummaries(param){
        const { columns, data } = param;
        const sums = [];
        columns.forEach((column, index) => {
          const values = data.map(item => Number(item[column.property]));
          if (!values.every(value => isNaN(value))) {
            if(index != 1 && index != 5) {
              sums[index] = values.reduce((prev, curr) => {
                const value = Number(curr);
                if (!isNaN(value)) {
                  return prev + curr;
                } else {
                  return prev;
                }
              }, 0);
            }

          }
        });
        return sums;
      },
      // payDetailclickRow(row) {//选择当前行
      //   this.$refs.payDetailTable.toggleRowSelection(row);
      // },
      payDetailchangFun(row) {//获取当前行数据
        this.payDetailchangFunTable = row;
        this.num = 0;
        let netAmt=0;
        let topayAmount = 0;
        if(row.length != 0) { //代收款列表选中
          if(this.changFunTable.length != 0) {//判断抵扣费用是否有选中值 有
            this.changFunTable.forEach(payItem => {//循环抵扣费用
              if(payItem.net_amt < 0) {
                topayAmount -= parseFloat(Math.abs(payItem.net_amt));//抵扣金额相加
              }else {
                topayAmount += parseFloat(payItem.net_amt);//抵扣金额相加
              }
            })
            row.forEach(item => {
              if(item.topay_amount < 0) {
                netAmt += parseFloat(Math.abs(item.topay_amount));
              }else {
                netAmt -= parseFloat(item.topay_amount);
              }
            })
            this.surplus = topayAmount + netAmt;
          }else {
            this.surplus = netAmt.toFixed(2);
          }
        }else {//代收款列表没有选中
          this.changFunTable.forEach(payItem => {//循环抵扣费用
            if(payItem.net_amt < 0) {
              topayAmount -= parseFloat(Math.abs(payItem.net_amt));//抵扣金额相加
            }else {
              topayAmount += parseFloat(payItem.net_amt);//抵扣金额相加
            }
          })
          this.surplus = topayAmount + netAmt;
        }
      },
      pagination(val) { // 分页功能
        let dataSearch = {
          page: val
        }
        common.getPreData(dataSearch, 'InvoicePayHeader/getList', this, 'billRefundListSearch')
      },
      handleSizeChange(val) {
        let dataSearch = {
          limit: val
        }
        common.getPreData(dataSearch, 'InvoicePayHeader/getList', this, 'billRefundListSearch')
      },

      costViews(data) {
        let that = this
        that.http.post('RepaymentDetail/getRepayBillDetail',data).then(res => {
          that.costView = res.data.data.base_detail;
          that.payDetailList = res.data.data.dk_list;
          that.payDetailListjs = res.data.data.dk_list;
          // res.data.data.payDetailList.forEach(item => {
          //   item.invoice_code = res.data.data.main.invoice_code
          //   item.created_time = res.data.data.main.account_date
          // })

          that.payTypeList = res.data.data.dsk_list;
          // that.total = res.data.data.payTypeList.count
        }).catch((err) => {
          that.$message.error(err.response.data.msg);
        });
      },
      // 编辑框失去焦点
      editFcous(index, row) {
        const amount = parseInt(row.net_charge_amount) - parseInt(row.charge_amount);
        let changFunTableData = 0;
        let payTopay = 0
        if(row.topay_amount == '') { //抵扣金额是否为空 为空赋值0
          row.topay_amount = 0;
        }
        if(row.topay_amount < 0) { //抵扣金额是否小于应收-已收
          if(row.topay_amount < amount) {
            this.$message({ message: '请填写输入正确金额', type: 'error' })
            row.topay_amount = amount.toFixed(2);
          }
        }else {
          if(row.topay_amount > amount) { //抵扣金额是否大于应收-已收
            this.$message({ message: '请填写输入正确金额', type: 'error' })
            row.topay_amount = amount.toFixed(2);
          }
        }
        if(this.changFunTable.length != 0) {//判断抵扣费用是否有选中值 有
          this.changFunTable.forEach(item => {
            changFunTableData += parseFloat(item.net_amt);
          })
          if(changFunTableData < 0) { //代收金额是否为负数
            if(row.topay_amount < 0) {//抵扣金额是否为负数
              this.surplus = parseFloat(Math.abs(changFunTableData)) + parseFloat(Math.abs(row.topay_amount))
            }else {
              this.surplus = parseFloat(changFunTableData) - parseFloat(row.topay_amount)
            }
          }else {
            if(this.payDetailchangFunTable.length != 0) {
              this.payDetailchangFunTable.forEach(payItem => {
                payTopay += parseFloat(payItem.topay_amount)
              })
              if(payTopay < 0) {
                this.surplus = parseFloat(changFunTableData) + parseFloat(Math.abs(payTopay))

              }else{
                this.surplus = parseFloat(changFunTableData) - parseFloat(row.topay_amount)
              }
            }else {
              if(row.topay_amount < 0) {//抵扣金额是否为负数
                this.surplus = parseFloat(changFunTableData) + parseFloat(Math.abs(row.topay_amount))
              }else {
                this.surplus = parseFloat(changFunTableData) - parseFloat(row.topay_amount)
              }
            }
          }
          this.$refs.payDetailTable.toggleRowSelection(row,true);
        }else {
          this.surplus = 0
        }
        this.num = 0;
      },
      //作废
      toVoid() {
        let data = {
          type:2,
          id: this.costView.id
        }
        this.$emit('generateRefundData', data);
      },
      //提交
      submission() {
        let data = {
          type:1,
          id: this.costView.id
        }
        this.$emit('generateRefundData', data);
      },
      //一键平衡
      balance() {
        if (this.num == 0) {
          let surplus = 0;
          this.num++;
          if(this.changFunTable.length != 0) {
            this.changFunTable.forEach(item => {
              surplus+= parseFloat(item.net_amt);
            })
          }
          this.payDetailList.forEach((index, i) => {
            if(surplus == 0) { //判断代收列表是否选择
              index.topay_amount = surplus;
            }else {
              let xj = parseFloat(index.net_charge_amount) -  parseFloat(index.charge_amount); // 本次抵扣金额
              if(xj < 0) { //判断是否有为负数的优先相加在减去正式
                surplus =  parseFloat(surplus) + parseFloat(Math.abs(xj)); //负数转正式累加
                index.topay_amount = xj; //抵扣金额等于剩余金额
                this.$refs.payDetailTable.toggleRowSelection(index,true);
              }else if (xj >= 0) {
                if (surplus < xj) { //判断剩余金额是否小于抵扣金额
                  this.$refs.payDetailTable.toggleRowSelection(index,true);
                  index.topay_amount = surplus //抵扣金额等于剩余金额
                  surplus = 0//剩余金额等于0
                } else {//剩余金额大于抵扣金额
                  this.$refs.payDetailTable.toggleRowSelection(index,true);
                  index.topay_amount = xj // 本次抵扣金额不变
                  surplus -= xj// 剩余金额减去本次抵扣金额
                }
              }
            }
          })

          // this.payDetailList.forEach((index, i) => {
          //   if(this.changFunTable.length == 0) { //判断代收列表是否选择
          //     index.topay_amount = surplus;
          //   }else {
          //     let xj = parseFloat(index.net_charge_amount) -  parseFloat(index.charge_amount); // 本次抵扣金额
          //     if(xj < 0) { //判断是否有为负数的优先相加在减去正式
          //       surplus =  parseFloat(surplus) + parseFloat(Math.abs(xj)); //负数转正式累加
          //       index.topay_amount = xj; //抵扣金额等于剩余金额
          //     }
          //   }
          // })
          // this.payDetailList.forEach((index,j) => {
          //   if(this.changFunTable.length == 0) { //判断代收列表是否选择
          //     index.topay_amount = surplus;
          //   }else {
          //     let xj = parseFloat(index.net_charge_amount) -  parseFloat(index.charge_amount); // 本次抵扣金额
          //     if (xj >= 0) {
          //       if (surplus < xj) { //判断剩余金额是否小于抵扣金额
          //         index.topay_amount = surplus //抵扣金额等于剩余金额
          //         surplus = 0//剩余金额等于0
          //       } else {//剩余金额大于抵扣金额
          //         index.topay_amount = xj // 本次抵扣金额不变
          //         surplus -= xj// 剩余金额减去本次抵扣金额
          //       }
          //     }
          //   }
          // })
          this.surplus =  surplus;
        }
      },
      compare(prop) {
          return function (obj1, obj2) {
            var val1 = obj1[prop];
            var val2 = obj2[prop];
            if (!isNaN(Number(val1)) && !isNaN(Number(val2))) {
              val1 = Number(val1);
              val2 = Number(val2);
            }
            if (val1 < val2) {
              return -1;
            } else if (val1 > val2) {
              return 1;
            } else {
              return 0;
            }
          }
      },
      //首个
      first() {
        const dataList = {
          mall_id: this.mallId,
          pagetype: 'index',
          xh: 1,
          count: this.generateTotle,
        };
        this.pageType(dataList);
      },
      //上一个
      prev() {
        let pageIndex = parseInt(this.generateXh) - 1;
        if(pageIndex < 1) {
          pageIndex = 1
        }else if(pageIndex > this.generateTotle) {
          pageIndex = this.generateTotle
        }
        const dataList = {
          code: this.costView.code,
          mall_id: this.mallId,
          xh: pageIndex,
          count: this.generateTotle,
          pagetype: 'last'
        }
        this.pageType(dataList);
      },
      //下一个
      next() {
        let pageIndex = parseInt(this.generateXh) + 1;
        if(pageIndex < 1) {
          pageIndex = 1
        }else if(pageIndex > this.generateTotle) {
          pageIndex = this.generateTotle
        }
        const dataList = {
          mall_id: this.mallId,
          code: this.costView.code,
          xh: pageIndex,
          count: this.generateTotle,
          pagetype: 'next'
        }
        this.pageType(dataList);
      },
      //末尾
      last() {
        const dataList = {
          mall_id: this.mallId,
          pagetype: 'end',
          xh: this.generateTotle,
          count: this.generateTotle,
      }
        this.pageType(dataList);
      },
      pageType(data) {
        data = Object.assign(data, this.formInline);
        let that = this;
        this.loading= true;
        this.http.post('RepaymentDetail/billDetailPageList', data).then(res => {
          that.generateXh = data.xh;
          that.generateTotle = data.count;
          that.costView = res.data.data.base_detail;
          that.payDetailList = res.data.data.dk_list;
          that.payTypeList = res.data.data.dsk_list;
        }).catch((err) => {
          that.loading= false;
          that.$message.error(err.responseJSON.msg)
        });
      },
      //保存
      preservation() {
        let dklist = [];
        let dskids = '';
        this.payDetailchangFunTable.forEach(item => {
          const dklistObj = [item.ID,item.topay_amount]
          dklist.push(dklistObj)
        })
        this.changFunTable.forEach(item => {
           dskids = item.id +',' ;
        })

        this.http.post('RepaymentDetail/savePayOutConfirm', {
          dklist: JSON.stringify(dklist),
          dskids: JSON.stringify(dskids)
        }).then(res => {
          this.$message.success('保存成功')
        }).catch((err) => {

          this.$message.error(err.responseJSON.msg)
        });

      },
    }
  }
</script>

<style lang="scss" scoped>
  .titleText {
    padding: 5px 10px;
    background: #66b1ff;
    border: #ccc 1px solid;
    color: #fff;
  }
  .viewHeader {
    padding: 12px;
    float:right;
    span {
      display: inline-block;
      padding: 0 15px;
      border-right: 1px solid #97a8be;
      cursor: pointer;
    }
  }
</style>
